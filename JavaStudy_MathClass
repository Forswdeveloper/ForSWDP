수학 관련 다양한 연산의 제공을 위한 Math 클래스

난수의 생성

java.util.Random

Random rand = new Random() 인스턴스 생성 후 목적에 따라서 다음 중 하나를 호출한다.
public boolean nextBoolean() boolean 난수 반환
public int nextInt() int형  난수 반환
public long nextLong() long형  난수 반환
public int nextInt(int bount) 0이상 bound 미만 범위의 int형  난수 반환
public float nextFloat() 0.0이상 1.0 미만의 float형 난수 반환
public double nextDouble() 0.0이상 1.0 미만의 double형 난수 반환

씨드 기반의 난수 생성
Random rand = new Random(12) 에서 12는 난수의 생성 과정에서 씨앗으로 사용된다. 이 사용된 값을 씨드 값이라고 한다.
즉 난수 생성 알고리즘이 이 숫자를 기반으로 돌아가기 때문에 이 값이 같으면 생성되는 난수의 패턴는 100% 일치한다

Random rand = new Random(System.currentTimeMillis()) 이 호출문은 컴퓨터 현재 시간을 기준으로 계산하여 반환한다.
따라서 인스턴스에 심어지는 씨드 값은 달라진다.

Random rand = new Random() 이 문장에서 호출하는 생성자는 내부적으로 다음과 같은 방법으로 씨드 값을 설정한다
public Random(){
    this(System.currentTimeMillies());
}

실행할 때마다 다른 패턴.



문자열의 토큰 구분.

"PM:08:45" 에서 문자열을 이루는 정보는 PM,08,45 세개이다. 이 문자열은 구분자 : 에 기준으로 나뉜 토큰이다. 
이렇든 콜론을 기준으로 토큰을 추출하는것은 번거로운데  StringTokenizer 를 사용하면 편하다
public StringTokenizer(String str, String delim)
첫 번째 인자로 추출할 문자열을 전달, 두번째 인자로 구분자 정보를 전달하면 구분자를 기준으로 추출한다.
구분자는 둘 이상을 둘 수 있다

import java.util.StringTokenizer;


public class TokenizeString {
	public static void main(String[] args)
	{
		StringTokenizer st1 = new StringTokenizer("PM:08:45",":");
		
		while(st1.hasMoreTokens())
		{
			System.out.print(st1.nextToken() + ' ');
		}
		
		System.out.println();
		
		StringTokenizer st2 = new StringTokenizer("12 + 36 - 8 / 2 = 44","+-/= ");  // 공백도 구분자
		
		while(st2.hasMoreTokens())
		{
			System.out.print(st2.nextToken() + ' ');
		}
	}
} 
public boolean hasMoreTokens()  반환 할 토큰이 남아 있는가?
public String nextToken() 다음 토큰을 반환.


