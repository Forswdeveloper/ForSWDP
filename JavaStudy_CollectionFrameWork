프레임워크의 이해

자바에서의 프레임워크 : 잘 정의된 구조의 클래스, 즉 프로그래머들이 쓸 수 있도록 잘 정의된 클래스들의 모임.

컬렉션 관련된 클래스의 정의에 적용되는 설계 원칙 또는 구조가 존재.



컬렉션의 의미와 자료구조

자료구조는 데이터의 저장 관련 학문으로 데이터의 탐색, 삭제 등 다양한 측면을 고려한 데이터의 효율적인 저장 방법을 연구하는 학문.

알고리즘은 저장된 데이터의 일부 또는 전체를 대상으로 하는 각종 가공 및 처리의 방법을 연구하는 학문이다.

컬렉션 프레임 워크는 데이터의 저장 방법, 그리고 이와 관련 있는 알고리즘에 대한 프레임워크이다.
자료구조와 알고리즘을 제네릭 기반의 클래스와 메소드로 미리 구현해 놓은 결과물이다.


컬렉션 프레임워크의 기본 골격.


인스턴스를 저장하는 컬렉션 클래스들은 인터페이스 중 하나를 구현하게 되어 있고,
구현한 인터페이스에 따라서 컬렉션 클래스의 데이터 저장방식이 결정.
따라서 구현한 인터페이스의 종류를 확인하는 일은 매우 중요하다.
제네릭 기반으로 구현이 되어 있다.


List<E> 인터페이스를 구현하는 컬렉션 클래스들.

저장공간에 제한 받지 않는다.
인스턴스의 저장이 핵심.
기능의 차이는 없음. ( 상황에 따른 성능의 차이만 있음.)

공통 특성
. 인스턴스의 저장 순서 유지 ( 나란히 )
. 동일 인스턴스의 중복 저장을 허용한다.

1. ArrayList<E> 클래스 : 배열 기반 자료구조, 배열을 이용하여 인스턴스 저장
공간을 미리 마련해둠.

제네릭 클래스라고 하더라도 import문 구성시에는 클래스의 이름만 명시해야 한다.
import java.util.List;
import java.util.ArrayList;

2. LinkedList<E> 클래스 (연결기반) : 리스트 기반 자료구조, 리스트를 구성하여 인스턴스 저장
공간을 필요할 때마다 만듬.

리스트 기반 자료구조는 열차 칸을 더하고 빼는 형태의 자료구조이다.
저장공간을 열차 칸 추가하듯이 늘릴 수 있기 때문에 ArrayList<E>와 달리 인스턴스의 저장공간을 마련해 둘 필요가 없다.


ArrayList<E> vs LinkedList<E>

ArrayList<E>의 단점은 다음과 같다.
. 저장 공간을 늘리는 과정에서 시간이  많이 소요된다.
. 인스턴스의 삭제 과정에서 많은 연산이 필요할 수 있다. 따라서 느리다.

장점.
. 저장된 인스턴스의 참조가 빠르다.

LinkedList<E>의 단점
. 저장된 인스턴스의 참조 과정이 배열에 비해 복잡하다. 따라서 느리다.
장점
. 저장 공간을 늘리는 과정이 간단하다.
. 저장된 인스턴스의 삭제 과정이 단순하다.


저장된 인스턴스의 순차적 접근 방법 : 1. enhanced for 문의 사용.
컬렉션 클래스를 활용하는데 보편적이고 중요한 작업 중 하나는
" 저장된 모든 인스턴스들에 순차적으로 접근 " 이다.

List<String> list = new LinkedList<>();

for(String s : list)
    System.out.println(s + '\t');
    
위와 같이 for each 문을 통한 순차적 접근의 대상이 되려면
public interface Iterable<T> 를 구현해야 한다.

ArrayList<E> 와 LinkedList<E>는 위의 인터페이스를 구현하고 있다. 정확히는 Collection<E> 가 Iterable<E>를 상속한다.
ArrayList<E> 와 LinkedList<E>는  Collection<E>를 구현하고 있다.

Iterable<E> 를 직접 혹은 간접적으로 구현하는 클래스의 인스턴스를 대상으로 for each 문을 구성할 수 있다.

반복자가 만들어놓은 방법만 쓰면 대상이 누구든지간에 인스턴스를 참조해낼 수 있다.

저장된 인스턴스의 순차적 접근 방법2
 
 Collection<E>를 구현하는 자바의 제네릭 클래스는 Iterable<T>의 다음 추상메소드를 모두 구현한다.
 Iterator<T> iterator()
 이 메소드는 Iterator(반복자)라는 것을 반환한다.
 반복자는 저장된 인스턴스들을 순차적으로 참조할 때 사용하는 인스턴스로 일종의 지팡이에 비유할 수 있다.
 지팡이를 얻는 법.
 List<String> list = new LinkedList<>();
 Iterator<String> itr = list.iterator(); // 반복자 획득.

반복자를 통해 호출할 수 있는 메소드들은 다음과 같다.
E next()  다음 인스턴스의 참조 값을 반환
boolean hasNext() next 메소드 호출 시 참조 값 반환 가능 여부 확인. ( 반환 할 대상이 있나?)
void remove()   next 메소드 호출을 통해 반환했던 인스턴스 삭제.

저장된 인스턴스에 접근할 때 다음과 같다.
while(itr.hasNext()){  반환할 대상이 있으면
  str = itr.next(); next메소드를 호출한다.
}

for each문을 통해 순차 접근과 반복자를 이용하면 반복 중간에 특정 인스턴스를 삭제하는것이 가능하다.
while(itr.hasNext()){
  str = itr.next();
  if(str.equals("Box"))
    itr.remove();
}

가리키는 위치를 되돌리는 방법은 없고 첫번째로 돌아갈려면 반복자를 다시 얻어야한다.
Iterator<String> itr = list.iterator();

앞서 언급된 for each 문
for(String s : list)   list 자리에 오기 위해서는 list가 반복자 기반의 반복문으로 바뀌기 때문에 Iterable<T>의 인터페이스를 구현해야만 한다. 
    System.out.println(s + '\t');
수정 코드
for(Iterator itr = list.iterator(); itr.hasNext(); )
    System.our.println(itr.next() + '\t');
    


배열보다는 컬렉션 인스턴스가 좋다 : 컬렉션 반환.

두가지 이유로 배열이 컬렉션 인스턴스가 좋은데
1. 인스턴스의 저장과 삭제가 편하다.
2. 반복자를 쓸 수 있다.
단, 배열처럼 '선언과 동시에 초기화'를 할 수 없어서 초기에 무엇인가를 채워 넣는 일이 번거롭다.
그러다 다음 방법을 쓸 수 있다.

List<String> list = Arrays.asList("Toy", "Robot", "Box")
->  참조만을 목적으로 하면 이렇게 사용.
-> 인자로 전달된 인스턴스들을 저장한 컬렉션 인스턴스의 생성 및 반환
-> 이렇게 생성된 리스트 인스턴스는 immutable(바꿀 수 없는) 인스턴스이다.

새로운 인스턴스의 추가나 삭제가 필요한 상황이라면 다음 생성자를 기반으로 ArrayList<E> 인스턴스를 생성해야 한다.
class ArrayList<E>
public ArrayList(Collection<? extends E> c){...}  어떠한 컬렉션 인자도 전달이 가능하다.
-> Collection<E>를 구현한 컬렉션 인스턴스를 인자로 전달받는다.
-> E는 인스턴스 생성 과정에서 결정되므로 무엇이든 될 수 있다.
-> 매개변수 c로 전달된 컬렉션 인스턴스에서는 참조만(꺼내기만) 가능하다.

? extends E
위의 인스턴스는 값을 복사하기만 하는 역활을 하는데 값을 넣는 경우에는
컴파일 오류가 발생하도록 안정적으로 생성자를 정의하기 위해서 넣었다.

  List<String> list = Arrays.asList("Toy", "Robot", "Box")
  list = new ArrayList<>(list);  list 값 복사. 값 변경 가능해짐
배열을 대신하는 컬렉션 인스턴스 생성에 주로 사용된다.
공식처럼 사용.

다른 컬렉션 인스턴스에 저장된 데이터를 복사해서 새로운 컬렉션 인스턴스를 생성할 수 있다. 
(생성자)
public ArrayList(Collection<? extends E> c)
public LinkedList(Collection<? extends E> c)
public HashSet(Collection<? extends E> c)

기본 자료형 데이터의 저장과 참조

컬렉션 인스턴스도 기본 자료형의 값은 저장하지 못한다. 그러나 래퍼 클래스의 도움으로 이들 값 저장 및 참조 가능.

연결 리스트만 갖는 양방향 반복자.

List<E>의 다음 메소드 호출을 통해서 얻을 수 있다

public ListIterator<E> listIterator()
-> Iterator<E>를 상속한다.

대표 메소드들.

E next()
boolean hasNext()
void remove()           

E previous              next 메소드와 기능은 같고 방향만 반대
boolean hasPrevious()   hasNext() 메소드와 기능은 같고 방향만 반대

void add(E e)   인스턴스의 추가
void set(E e)   인스턴스의 변경

양방향 반복자의 획득

Listiterator<String> litr = list.listIterator()

사용예시

while (iter.hasNext()) {
   System.out.print(iter.next() + " ");
}

while (iter.hasPrevious()) { //역순으로 데이터가 있는지 확인한다.
   System.out.print(iter.previous() + " "); //역순으로 가져온다
}

next 호출 후에 add 호출하면, 앞서 반환된 인스턴스 뒤에 새 인스턴스 삽입된다.
previous 호출 후에 add 호출하면, 앞서 반환된 인스턴스 앞에 새 인스턴스 삽입된다.





Set<E> 인터페이스를 구현하는 컬렉션 클래스들.


Set<E> 인터페이스를 구현하는 클래스의 특성과 HashSet<E> 클래스


Set -> 집합.

. 저장 순서가 유지되지 않는다.
. 데이터의 중복 저장을 허용하지 않는다.

동일 인스턴스의 기준.

public boolean equals(Object obj)
 Object 클래스의 equals 메소드 호출 결과를 근거로 동일 인스턴스를 판단한다.
 
public int hashCode()   // 검사속도의 감소를 위한 메소드.
 그런데 그에 앞서 Object 클래스의 hashCode 메소드 호출 결과가 같아야 한다.
 
 정리하면, 두 인스턴스가 hashCode 메소드 호출 결과로 반환하는 값이 동일해야 한다.
 그리고 이어서 두 인스턴스를 대상으로 equals 메소드의 호출 결과 true가 반환되면 동일 인스턴스로 간주한다.
 

해쉬 알고리즘의 이해

해쉬 셋은 내부적으로 해쉬 알고리즘을 기반으로 분류 나누어서 저장한다.

탐색 1단계 : Object 클래스에 정의된 hashCode 메소드의 반환 값을 기반으로 부류 결정 ( 입력 데이터 기반으로 부류를 여러개로 나누는 역할을 함 )
탐색 2단계 : 선택된 부류 내에서 equals 메소드를 호출하여 동등 비교.

hashCode 메소드는 인스턴스가 저장된 주솟값을 기반으로 반환 값이 만들어지도록 정의되어 있다.

인스턴스가 다르면 Object 클래스의 hashCode 메소드는 다른 값을 반환한다.
인스턴스가 다르면 Object 클래스의 equals 메소드는 false를 반환한다.

hashCode 메소드의 다양한 정의.

클래스의 모든 변수를 활용하여 hashCode를 정의하는것이 좋다.
근데 이것이 어렵기 때문에 자바에서 hash메소드를 제공한다.
public static int hash(Object...values)
-> java.util.Objects에 정의된 메소드, 전달된 인자 기반의 해쉬 값 반환.
위 메소드의 매개변수 선언에는 가변 인자 선언이 포함되어 있는데 이는 전달되는 인자의 수를 메소드 호출 시마다 달리할 수 있는 선언이다.

ex)
@Override
public int haschCode(){
    return Objects.hash(model, color);
}
하나 이상의 인자를 조합하여 하나의 해쉬 값을 만들어 반환한다.

TreeSet<E> 클래스의 이해와 활용.

트리 자료구조를 기반으로 인스턴스를 저장.
이는 정렬된 상태가 유지되면서 인스턴스가 저장됨을 의미한다.

TreeSet<E> 인스턴스가 정렬 상태를 유지하면서 인스턴스를 저장하기 때문에 TreeSet<E>의 반복자는 다음의 특징을 갖는다.
" 인스턴스들의 참조 순서는 오름차순을 기준으로 한다."
class Person{
    private String name;
    private int age;
}

위 클래스의 경우 어떻게 정하느냐에 따라서 오름차순으로의 나열 결과는 달라지게 된다.
이 크고 작음에 대한 기준은 프로그래머가 정의하기 나름이다.
이 기준은 public interface Comparable<T> 인터페이스의 구현을 통해 정해주어야 한다.
기준은 추상 메소드 int compareTo(T o)를 사용해서 얻게된다.


인스턴스의 비교 기준을 정의하는 Comparable<T> 인터페이스의 구현 기준.

int compareTo(T o)
인자로 전달된 o가 작다면 양의 정수 반환.
인자로 전달된 o가 크다면 음의 정수 반환.
인자로 전달된 o와 같다면 0을 반환.

위 메소드를 정의하게 되면 TreeSet<T> compareTo 메소드 호출 결과를 바탕으로 정렬이 된다.

" 따라서 TreeSet<T>에 저장할 인스턴스들은 모두 Comparable<T> 인터페이스를 구현한 클래스의 인스턴스이어야 한다. "

반복자는 오름차순을 기준으로 인스턴스를 참조하는 특성이 있다.
이 정렬하여 저장하는 기준은 Comparable 인터페이스에 있는 compareTo 메소드를 참조하여 결정한다.
이 기준은 프로그래머가 정의하기 나름이다.

TreeSet<E> 클래스의 오름차순 출력

interfae Comparable<T> 제네릭 등장이후 바뀐 Comparable 인터페이스.
-> int compareTo(T o)  반환형 정보는 같음.



Comparator<T> 인터페이스 기반으로 TreeSet<E>의 정렬 기준 제시하기.


String 클래스가 구현하고 있는 Comparable 인터페이스의 compareTo 메소드는 사전편찬 순으로 정렬되게 정의되어 있다.
이것은 바꿀수가 없다. 바꾸고 싶은데 어떻게 바꿀까.

public TreeSet(Comparator<? super E> comparator) 로 바꿀 수가 있다.
-> 정렬의 기준 정보를 담고 있는 인스턴스를 인자로 전달하면 
   기준 정보를 이용하여 트리구조로 인스턴스를 저장하겠다.

정렬 기준 정보를 어떻게 만드느냐?
정렬 기준 정보는 아래를 이용하면 된다.
정렬 기준 정보에 이용되는 클래스의 이름이 어떠한가는 중요하지 않으나, 
그 클래스가 Comparable<T>인터페이스가 아닌 "Comparator<T> 인터페이스" 를 구현하고 있어야 한다.
public interface Comparator<T>
-> int compare(T o1, T o2)의 구현을 통해 정렬 기준을 결정할 수 있다. 
o1 이 o2보다 크면 양의 정수 반환
o1 이 o2보다 작으면 음의 정수 반환.
o1 과 o2가 같다면 0 반환.

위와 같이 구현하면 된다.

class PersonComparator implements Comparator<Person>{
    public int compare(Person p1, Person p2){
        return p2.age - p1.age;   나이가 많으신 분을 앞에 세우는 연산.  < 내림차순 >  순서바꾸면 오름차순.
    }
}
위의 인스턴스를 인자로하여
TreeSet<Person> tree = TreeSet<>(new PersonComparator()) 인스턴스 생성
이 인스턴스는 인자로 전달된 인스턴스의 compare 메소드 호출 결과를 바탕으로 정렬 상태를 유지하게 된다.

따라서 기존 클래스에 정의되어 있던 정렬 기준을 바꿀 때에 Comparator<T> 인터페이스의 compare 메소드를 이용한다.


중복된 인스턴스의 삭제.

List<String> list = Arrays.asList("Box", "Toy", "Box", "Toy");
ArrayList<String> list = new ArrayList<>(list);

// 중복된 인스턴스를 걸러 내기 위한 작업.
HashSet<String> set = new HashSet<>(list);

// 원래대로 옮긴다.
list = new ArrayList<>(set);

위 예제의 핵심은
HashSet<String> set = new HashSet<>(list); 문장에 있다.

public HashSet(Collection<? extends E> c)
-> 다른 컬렉션 인스턴스로부터 HashSet<E> 인스턴스 생성.
위와 같이 인스턴스를 생성하면 HashSet<String>인스턴스에 저장 대상을 복사하는 연산이 내부적으로 진행된다.
그 과정에서 Set<E> 인터페이스의 성격에 맞게 중복된 인스턴스는 걸러지게 된다.


Queue<E> 인터페이스를 구현하는 컬렉션 클래스들.





