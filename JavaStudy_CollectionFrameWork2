컬렉션 프레임워크 2.


컬렉션 기반 알고리즘 (sort,탐색)

정렬이나 탐색과 관련된 메소드.



- 정렬

List<E>를 구현한 컬렉션 클래스들은 저장된 인스턴스를 정렬된 상태로 유지하지 않는다.
대신에 정렬을 해야 한다면 다음 메소드를 사용할 수 있다.

public static <T extends Comparable<T>> void sort(List<T> list)
1. Collections 클래스에 정의되어 있는 제네릭 메소드.
2. 인자로 List<T>의 인스턴스는 모두 전달 가능.
3. 단, T는 Comparable<T> 인터페이스를 구현한 상태이어야 한다.


ex)

List<String> list = Arrays.asList("Toy","Box","Robot","Weapon");
list = new ArrayLIst<>(list);  -> ArrayList<String>

for(Iterator<String> itr = list.iterator(); itr.hasNext();)
{
  System.out.println(itr.next()+ '\t');
}
System.out.println();
                                                    Comparable<String>       List<String>
Collections.sort(list);  -> public static<T extends Comparable<T>> void sort(List<T> list)
                            class String extends Object implements Comparable<String> 실제 String 클래스.

for(Iterator<String> itr = list.iterator(); itr.hasNext();)
{
  System.out.println(itr.next() + '\t');
}
System.out.println();


<T extends Comparble<T>> 아니고 <T extends Comparable<? super T>>


public static <T extends Comparable<? super T>> void sort(List<T> list)
<T extends Comparable<? super T>> 이 선언 자체를 외우자.

예제 내용도 외우자. (상황 자체를)

class Car implements Comparable<Car>{
  private int disp; //배기량.
  public Car(int d) {disp = d;}
  ......                                sort 메소드가 다음과 같다고 가정.
  @Override                                 public static<T extends Comparable<T>> void sort(List<T> list)
  public int compareTo(Car o)
  {
      return disp - o.disp;
  }
}
public static void main(String[] args)
{
  List<Car> list = new ArrayList<>();
  list.add(new Car(1200));
  list.add(new Car(3000));
  list.add(new Car(1800));
  Colections.sort(list); // 정렬   <- void sort(List<Car> list)  <- Comparable<Car>를 구현해야한다.
  
  for(Iterator<Car> itr = list.iterator(); itr.hasNext();)
  {
      System.out.println(itr.next().toString() + '\t');
  }
  
}


<T extends Comparable<? super T>> 의 이해2 

class Car implements Comparable<Car>{...}

class ECar extends Car{...}      // ECar는 Comparable<Car>를 간접 구현.
                                            sort 메소드가 다음과 같다고 가정.
                                            public static<T extends Comparable<T>> void sort(List<T> list)
public static void main(String[] args)
{
  List<ECar> list = new ArrayList<>();   
  .....
  Collections.sort(list);     <- <Ecar extends Comparable<ECar>> void sort(List<ECar> list) 
  // 성공할 수 있을까?  상식적으로는 성공해야 한다. 
     하지만 Comparable<Car>를 구현할 뿐 ,위처럼 ECar가 Comparable<ECar>를 구현하지 않음으로 실패.
}

<T extends Comparable<? super T>> 의 이해3

class Car implements Comparable<Car>{...}

class ECar extends Car{...}      // ECar는 Comparable<Car>를 간접 구현.
                                            그러나 실제로는 다음과 같으니!
                                            public static <T extends Comparable<? super T>> void sort(List<T> list)
public static void main(String[] args)
{
  List<ECar> list = new ArrayList<>();   
  .....
  Collections.sort(list);     <- public static <Ecar extends Comparable<? super ECar>> void sort(List<ECar> list) 
  // 메소드 호출 가능! 하한제한함으로  ECar가 상속하는 클래스 Car가 , ECar를 직,간접 상속하는 클래스가 올 수 있다. 
}

정렬 Comparator<T> 기반


Collections 클래스에는 호출 시 정렬의 기준을 결정할 수 있는(Comparator<T>) 다음 메소드가 정의되어 잇다.
    public static <T> void sort(List<T> list, Comparator<? super T> c)

class Car{....}                                    List<Car> clist = new Array.List<>(); 
//Car의 정렬을 위한 클래스                           
class CarComp implements Comparator<Car>{...}   //새로운 정렬기준을 근거로 sort 메소드 호출하기 위하여 정의.

class ECar extends Car{....}                       List<ECar> elist = new Array.List<>();

Carcomp comp = new Carcomp();

Collections.sort(clist, comp);
Collections.sort(elist, comp);




찾기

public static <T> int binarySearch(List<? extends Comparable<? super T>> list, T key)
-> list에서 key를 찾아 그 인덱스 값 반환, 못 찾으면 음의 정수 반환.

Step 1. public static <T> int binarySearch(List<?> list, T key)
Step 2.                                   (List<? extends Comparable<T>> list, T key)
Step 3.                                   (List<? extends Comparable<? super T>> list, T key)


찾기의 예
public static <T> int binarySearch(List<? extends Comparable<? super T>> list, T key)

List<String> list  = new ArrayList<>();
list.add("Box");
list.add("Robot");
list.add("Apple");
Collections.sort(list); // 이진 탐색 전 정렬이 먼저다.
int idx = Collections.binarySerach(list, "Robot");
System.out.println(list.get(idx));


찾기 : Comparator<T> 기반

이진탐색은 정렬이 된 상태에서 가능하다.

public static <T> int binarySearch(List<? extends T> list, T key, Comparator<? super T> c)
-> list에서 key를 찾는데 c의 기준을 적용하여 찾는다.

Step 1. public static <T> int binarySerach(List<T> list, T key, Comparator<T> c)
Step 2.                                   (List<? extends T> list, T key, Comparator<? super T> c)


찾기 : Comparator<T> 기반 예

class StrComp implements Comparator<String>{
  @Override
  public int compare(String s1, String s2){
      return s1.compareToIgnoreCase(s2); // 대문자, 소문자 구분 없이 비교.
  }
}

class StringComparator{
  publc static void main(String[] args)
  {
    List<String> list = new ArrayList<>();
    list.add("ROBOT);
    list.add("APPLE");
    list.add("BOX");
    
    StrComp cmp = new StrComp();  // 정렬과 탐색의 기준 ( 정렬과 탐색 기준은 같아야 한다.)
    Collections.sort(list.cmp); // 정렬
    int idx = Colections.binarySearch(list,"Robot",cmp); //탐색
    System.out.println(list.get(idx)); //탐색 결과 출력.
  }
}


복사하기


public static <T> void copy(List<? super T> dest, List<? extends T> src)
-> src의 내용을 dest로 복사

List<T> dest 아닌 List<? super T> dest 인 이유는?
-> dest에 T형 인스턴스를 넣는 것만 허용하겠다. 꺼내면 컴파일 에러!
List<T> src 아닌 List<? extends T> src 인 이유는?
-> src로부터 T형 인스턴스 꺼내는 것만 허용하겟다. 넣으면 컴파일 에러!





