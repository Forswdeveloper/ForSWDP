복잡한 if~else 문을  Optional클래스로 떠 넘길 수 있다.



NullPointerException 예외의 발생 상황1
인스턴스 변수는 한순간에도 null로 표현되지 않는 값으로 초기화 하는게 좋다. ( 유효한 값만 가져야 한다.)
가장 좋은 것은 null로 초기화 할 인스턴스 변수가 없는 것이다.
하지만 변수가 일시적으로 null 일 수 있음을 고려해야한다.
어쩔 수 없이 null로 정의해야 할 경우.일시적으로 null 로 초기화함을 허용함으로 간단해질 수 있는 방편이 된다.
class Friend{
  String name;
  Company cmp;   // 회사를 다니지 않는 친구의 경우 값이 null 일 수 있다.
  
  public Friend(String n, Company c){    
    name = n;
    cmp = c;
  }
  public String getName() {return name;}
  public Company getCmp() {return cmp;}
  
}
class Company{
  String cName;
  ContInfo cInfo;  // null 일 수 있다.
  
  public Company(String cn, ContInfo ci)
  {
    cName = cn;
    cInfo = ci;                                                        
  }
  public String getCName() { return CName;}
  public ContInfo getCInfo() {return cInfo;}
  
class ContInfo{
    String phone;// 회사의 번호가 없는 경우 null일 수 있다.
    String adrs;// 회사의 주소가 없는 경우 null일 수 있다.
    
    public ContInfo(String ph, String ad){ 
      phone = ph;
      adrs = ad;
    }
    public String getPhone() {return phone;}
    public String getAdrs() { retrun adrs; }
    
   
}
null 일 수 있는 경우 null 인지 아닌지 확인해야 한다.                                                                                                                                                                                                                                                                                                       



NullPointerException 예외의 발생 상황 2
null 가능성에 대비하는 코드의 작성은 번거롭고 그 코드 스타일도 만족스러운 편은 아니다.
이를 해결하기 위해 등장한것이 Optional클래스이다.
public static void showCompAddr(Friend f){
  String addr = null;
  if(f != null){
    Company com = f.getCmp();
    if(com != null){
      ConInfo info = com.getCInfo();
      if(info != null)
        addr = info.getAdrs();
    }
  }
  if(addr != null)
    System.out.println(addr);
  else
    System.out.println("There's no address information.");
}


Optional 클래스의 기본적인 사용 방법1
일종의 상자인데 if~else를 담을 수 있는 상자
액션을 명령하면 실행의 분기를 알아서 판단.
public final clas Optional<T> extends Object{
  private final T value; // 이 참조변수를 통해 저장을 하는 일종의 래퍼 클래스.
}

< 상자를 만드는 방법 >
Optional<String> os1 = Optional.of(new String("Toy1"));    // of는 null을 허용하지 않음.
Optional<String> os2 = Optional.ofNullable(new String("Toy2"));   // ofNullable은 null 허용.

if(os1.isPresent()) /// 내용물이 있냐. ( ture/false )
  System.out.println(os1.get());   
  
if(os2.isPresent())
  System.out.println(os2.get());

순서
isPresent() -> get()


Optional 클래스의 기본적인 사용 방법 2

Optional<String> os1 = Optional.of(new String("Toy1"));
Optional<String> os2 = Optional.ofNullable(new String("Toy2");
os1.ifPresent( s -> System.out.println(s)); //내용물이 존재한다면 출력( 람다식 실행 ).
os2.ifPresent( System.out::println);   // 줄임.


public void ifPresent(Consumer<? super T> consumer)


Optional 클래스를 사용하면 if~else문을 대신할 수 있다.  : 이러한 if~else 문들.

class ContInfo{
    String phone;// 회사의 번호가 없는 경우 null일 수 있다. ( 가정 )
    String adrs;// 회사의 주소가 없는 경우 null일 수 있다. ( 가정 )
    
    public ContInfo(String ph, String ad){ 
      phone = ph;
      adrs = ad;
    }
    public String getPhone() {return phone;}
    public String getAdrs() { retrun adrs; }
    
   
}
ContInfo ci = new ContInfo(null, "Republic of Korea");
String phone;
String addr;

if(c1.phone != null)
  phone = ci.getPhone();
else
  phone = "There is no phone number.";
  
if(ci.adrs != null)
  addr = ci.getAdrs();
else
  addr = "There is no address.";
  
System.out.println(phone);
System.out.println(addr);











