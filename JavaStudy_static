//1. static 메소드와 변수는 인스턴스 생성 전에 존재.
//2. static 메소드와 변수는 어떤 인스턴스에도 속하지 않는다.
//3. static 메소드와 변수는 어떤 인스턴스에도 속할 필요가 없다.
//4. static 메소드와 변수는 같은 클래스에 정의되어 있는 다른 클래스 메소드나 성격이 동일한 클래스 변수에는 접근이 가능하다.

1.
class InstCnt{
	static int instNum = 100;
	
	
	InstCnt(){
		instNum++;
		System.out.println("인스턴스 생성 : " + instNum);
		
	}
}
public class ClassVarAccess {
	public static void main(String[] args) {
		
		InstCnt.instNum-=15;
		System.out.println(InstCnt.instNum);
		InstCnt a = new InstCnt();   // 인스턴스 변수는 인스턴스 생성 이전에 존재.
    }
}

2,3
class SC{
	static final double PI = 3.14;
	
	static void add(double n1, double n2)
	{
		System.out.println(n1+n2);
	}
	static void min(double n1, double n2)
	{
		if(n1>n2)
			System.out.println(n1-n2);
		else
			System.out.println(n2-n1);
	}
	static void calCircleArea(double r)
	{
		System.out.println(PI*r*r);
	}
	static void calCirclePeri(double r)
	{
		System.out.println(PI*(r*2));
	}
}
public class UseCalculator {
	public static void main(String[] args)
	{
		SC.add(4,7);
		SC.min(8,9);
		SC.calCircleArea(3.5);
		SC.calCirclePeri(4.6);
	}
}

4
가능한 조건.
class AAA{
	static int num = 0;
	static void showNum()
	{
		System.out.println(num);
	}
	static void addNum(int n)
	{
		num += n;
		showNum();
	}
}
불 가능한 조건

class BBB{
	int num = 0;
	static void addNum(int n)
	{
		num += n;
	}
}
