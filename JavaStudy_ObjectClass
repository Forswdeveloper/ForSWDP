인스턴스 소멸 시 해야 할 일이 있다면 : finalize 메소드

아무도 참조하지 않는 인스턴스가 가비지 컬렉션에 의해 소멸되기 전에 자동으로 호출되는 메소드이다.

class Person{
	String name;
	
	public Person(String name)
	{
		this.name = name;
	}
	
	@Override 
	protected void finalize() throws Throwable {
		super.finalize();
		System.out.println("destroyed : " + name);
	}
}
public class Objectfinalize {
	public static void main(String[] args)
	{
		Person p1 = new Person("Yoon");
		Person p2 = new Person("Park");
		p1 = null;
		p2 = null;
		
		/*
		 * System.gc(); 
		 * System.runFinalization();
		 */
		
		System.out.println("End of Program");
	}
}
오버라이딩 하는 상위 클래스의 메소드가 보인이 정의한 클래스가 아니라면 특히 Object와 같이 자바에서 제공하는 클래스의 메소드라면
오버라이딩 된 메소드를 호출하는 것이 안전하다.

가비지 컬렉션의 대상이 되었음에도 불구하고 finalize 메소드가 호출된 흔적은 볼 수 없는데 그 이유는.

1.가비지 컬렉션은 빈번히 일어나지 않는다.
2.소멸할 인스턴스가 생겨도 가비지 컬렉션으로 바로 이어지지 않는다.

public static void gc()
-> 가비지 컬렉션의 수행을 요청(명령이 아닌 요청)
public static void funFinalization()
-> 소멸이 보류된 인스턴스의 finalize 메소드 호출을 요청( 명령아 아닌 요청 )

가비지 컬렉션의 수행을 요청 할 수는 있으나 요청이 있다고 언제나 진행하지 않는다. 가상머신이 노력을 할 뿐.
수행된다고해도 모두 소멸되지는 않는다.

인스턴스의 비교 : equals 메소드.

== 연산은 참조변수의 참조 값을 비교한다. 
서로다른 두 인스턴스의 내용을 비교하기 위해서 별도의 방법을 사용해야한다.

class INum{
	private int num;
	
	public INum(int num) {
		this.num = num;
	}
	@Override
	public boolean equals(Object obj)
	{
		if(this.num == ((INum)obj).num)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}
public class ObjectEquality {
	public static void main(String[] args)
	{
		INum num1 = new INum(10);
		INum num2 = new INum(11);
		INum num3 = new INum(12);
		
		if(num1.equals(num2)) {
			System.out.println("num1, num2 내용 동일하다.");
		}
		else
			System.out.println("num1, num2 내용 동일하지 않다.");
		
		if(num1.equals(num3))
			System.out.println("num1, num3 내용 동일하다.");
		else
			System.out.println("num1, num3 내용 동일하지 않다.");
		
	}
}

equals 메소드는 내용 비교가 이루어지도록 오버라이딩 하라고 존재하는 메소드이다.
