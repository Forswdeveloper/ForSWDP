인스턴스 소멸 시 해야 할 일이 있다면 : finalize 메소드

아무도 참조하지 않는 인스턴스가 가비지 컬렉션에 의해 소멸되기 전에 자동으로 호출되는 메소드이다.

class Person{
	String name;
	
	public Person(String name)
	{
		this.name = name;
	}
	
	@Override 
	protected void finalize() throws Throwable {
		super.finalize();
		System.out.println("destroyed : " + name);
	}
}
public class Objectfinalize {
	public static void main(String[] args)
	{
		Person p1 = new Person("Yoon");
		Person p2 = new Person("Park");
		p1 = null;
		p2 = null;
		
		/*
		 * System.gc(); 
		 * System.runFinalization();
		 */
		
		System.out.println("End of Program");
	}
}
오버라이딩 하는 상위 클래스의 메소드가 보인이 정의한 클래스가 아니라면 특히 Object와 같이 자바에서 제공하는 클래스의 메소드라면
오버라이딩 된 메소드를 호출하는 것이 안전하다.

가비지 컬렉션의 대상이 되었음에도 불구하고 finalize 메소드가 호출된 흔적은 볼 수 없는데 그 이유는.

1.가비지 컬렉션은 빈번히 일어나지 않는다.
2.소멸할 인스턴스가 생겨도 가비지 컬렉션으로 바로 이어지지 않는다.

public static void gc()
-> 가비지 컬렉션의 수행을 요청(명령이 아닌 요청)
public static void funFinalization()
-> 소멸이 보류된 인스턴스의 finalize 메소드 호출을 요청( 명령아 아닌 요청 )

가비지 컬렉션의 수행을 요청 할 수는 있으나 요청이 있다고 언제나 진행하지 않는다. 가상머신이 노력을 할 뿐.
수행된다고해도 모두 소멸되지는 않는다.

인스턴스의 비교 : equals 메소드.

== 연산은 참조변수의 참조 값을 비교한다. 
서로다른 두 인스턴스의 내용을 비교하기 위해서 별도의 방법을 사용해야한다.

class INum{
	private int num;
	
	public INum(int num) {
		this.num = num;
	}
	@Override
	public boolean equals(Object obj)
	{
		if(this.num == ((INum)obj).num)   //강제 형변환 후 비교
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}
public class ObjectEquality {
	public static void main(String[] args)
	{
		INum num1 = new INum(10);
		INum num2 = new INum(11);
		INum num3 = new INum(12);
		
		if(num1.equals(num2)) {
			System.out.println("num1, num2 내용 동일하다.");
		}
		else
			System.out.println("num1, num2 내용 동일하지 않다.");
		
		if(num1.equals(num3))
			System.out.println("num1, num3 내용 동일하다.");
		else
			System.out.println("num1, num3 내용 동일하지 않다.");
		
	}
}

equals 메소드는 내용 비교가 이루어지도록 오버라이딩 하라고 존재하는 메소드이다.

인스턴스 복사(복제) : clone 메소드

protected Object clone() throws CloneNotSupportedException
이 메소드는 인터페이스를 구현한 인스턴스를 대상으로만 메소드를 호출할 수 있다.

clone 메소드는 protected로 선언되어있는데 위처럼 public 선언으로 오버라이딩 할 수 있다 이것이 오버라이딩을 하는 이유이다.
접근범위를 좁은범위에서 넓은 범위로 옮겨주는것은 가능하지만 넓은 범위에서 좁은 범위로의 범위 국한은 불가능하다.

얕은 복사와 깊은 복사
class Pointt implements Cloneable{
	private int xPos;
	private int yPos;
	
	public Pointt(int x , int y)
	{
		xPos = x;
		yPos = y;
	}
	public void showPosition()
	{
		System.out.println(xPos + "," +yPos);
	}
	public void changePos(int x , int y)
	{
		xPos = x;
		yPos = y;
	}
	@Override
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}
}
class Rectangle implements Cloneable{
	private Pointt upperLeft;
	private Pointt lowerRight;
	
	public Rectangle(int x1, int x2, int y1, int y2)
	{
		upperLeft = new Pointt(x1,y1);
		lowerRight = new Pointt(x2,y2);
	}
	public void change(int x1, int x2, int y1, int y2)
	{
		upperLeft.changePos(x1, y1);
		lowerRight.changePos(x2, y2);
	}
	@Override
	public Object clone() throws CloneNotSupportedException
	{
		Rectangle cpy = (Rectangle)super.clone();
		
		cpy.lowerRight = (Pointt)lowerRight.clone();
		cpy.upperLeft = (Pointt)upperLeft.clone();

		
		return cpy;
		//얕은 복사 return super.clone();
	}
	public void showPosition()
	{
		System.out.print("좌측 상단 : ");
		upperLeft.showPosition();
		
		System.out.print("우측 상단 : ");
		lowerRight.showPosition();
		System.out.println();
	}
}
public class ShaalowCopy {
	public static void main(String[] args)
	{
		Rectangle org = new Rectangle(1,1,9,9);
		Rectangle cpy;
		
		try {
			cpy = (Rectangle)org.clone();
			org.change(2, 2, 7, 7);
			cpy.showPosition();
			org.showPosition();
			
		}
		catch(CloneNotSupportedException e)
		{
			e.printStackTrace();
		}
	}
}

인스턴스가 String 인 경우 깊은 복사

Person cpy = (Person)super.clone();
cpy.name = new String(name);
return cpy;

배열은 참조 값의 복사 값만 이뤄질 뿐 해당 참조 값의 인스턴스가지 복사되지 않는다.
깊은 복사가 안됨

clone 메소드는 반환형이 Object이므로 clone 메소드를 호출하면서 동시에 형 변환도 진행해야한다.
그런데 자바 5 이후부터는 반환형의 수정을 허용한다.
예를 들어 
class AAA{
	public AAA method(){...}
}
class ZZZ extends AAA{
	public ZZZ method(){....}
}
단 무엇으로든 수정할 수 있는 것은 아니다.클래스 이름이 AAA인 경우 반환형이 AAA인 메소드에 대해서만 수정하여 오버라이딩 가능.
따라서 
@Override
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}
이것이
@Override
	public Point clone() throws CloneNotSupportedException{
		return (Point)(super.clone());
	}
위와 같이 오버라이딩 할 수 있다.
이렇게 하면 형 변환 없는 clone 메소드 호출이 가능.
