패키지 : java.util 

Scanner 클래스 : 생성자로 전달되는 대상으로부터 데이터를 추출하는 기능을 제공.

import java.util.Scanner;
public class ScanningString {
	public static void main(String[] args)
	{
		String source = "1 3 4"; //띄워줘야 추출가능
		Scanner sc = new Scanner(source);
		
		int num1 = sc.nextInt();
		int num2 = sc.nextInt();
		int num3 = sc.nextInt();
		
		int sum = num1 + num2 + num3;
		
		System.out.println(sum);
		
		//Scanner 키보드 적용  System.in
		
		Scanner sa = new Scanner(System.in);
		
		int num4 = sa.nextInt();
		int num5 = sa.nextInt();
		int num6 = sa.nextInt();
		
		sum = num4+num5+num6;
		
		System.out.printf("%d + %d + %d = %d \n",num4, num5, num6, sum);
		
		//String 추출  nextLine();
		
		Scanner sb = new Scanner(System.in);
		System.out.print("문자열 입력 : ");
		String str1 = sb.nextLine();
		
		System.out.print("문자열 입력 : ");
		String str2 = sb.nextLine();
		
		System.out.printf("입력된 문자열 : %s\n",str1);
		System.out.printf("입력된 문자열 : %s\n",str2);
		
		
		String str3 = str1.concat(str2);
		
		System.out.println(str3);
		
	}
}



BufferedReader와 BufferedWriter 사용

import java.io.*;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;


BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

try {
            int n = Integer.parseInt(bf.readLine());
            if(n > 1000000) {
                System.out.println("입력값이 1,000,000 넘었습니다.");
                return;
            }
            for(int i=0; i<n; i++) {
                String[] word = bf.readLine().split(" ");  // 공백을 기준으로 문자열 읽음.
                if(Integer.parseInt(word[0]) < 0 || Integer.parseInt(word[0]) > 1000 
                        || Integer.parseInt(word[1]) < 0 || Integer.parseInt(word[1]) > 1000) {
                    System.out.println("더해지는 숫자는 0~1000까지의 숫자입니다.");
                    return;
                }
                bw.write(Integer.parseInt(word[0])+Integer.parseInt(word[1])+"\n");
            }
            bw.flush();
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

readLine() 메서드를 사용한다.
1. readLine() 메서드는 리턴값이 String 타입으로 고정이기 때문에,
  다른 타입의 데이터를 입력받길 원할 경우 추가적인 형변환이 필요하다. 
2. readLine() 메서드는 예외 처리가 필요하다.
  1) throw 이용
    (1) 클래스를 import해주어야 한다.
        import java.io.IOException;
    (2) main 클래스 옆에 throws IOException를 작성한다.
        public static void main(String[] args) throws IOException {
  2) try & catch 이용
  
 write() 메서드를 사용하여 출력 값들을 버퍼에 저장해두고, flush() 메서드를 사용하여 출력한다.
1. write() 메서드는 줄바꿈을 자동으로 지원하지 않는다.
  따라서 개행이 필요할 경우 \n을 덧붙여야 한다.


String -> int 형변환

Integer.parseInt() 이용.
ex)
String st = "3000";
int num = Integer.parseInt(st);

int -> String 형변환

1.Integer.toString() 이용.
2.String.valueOf() 이용.

toString과 valueOf는 변환 결과는 같지만 변환할 값이 null인 경우
그대로 null을 반환하는 valueOf와는 달리, toString은 Exception을 발생시킨다는 차이점이 있다.

split(" ") -> 공백을 기준으로 분할.

이 문제는 Scanner로 입력받아 출력하면 간단하게 풀리는 문제인데

BufferedReader와 BufferedWriter를 사용해 조금 더 빠른 처리를 유도한 문제이다.

알고리즘 문제를 풀땐 속도를 중요시 생각하기 때문에

Buffered클래스 사용을 더 선호한다.



위코드에서 Bufferd외에 Input/OutputStream이 사용되었는데 

InputStream을 이용해 사용자로부터 데이터 입력을 받고 (이때, Byte형식으로 저장)

InputStream을 통해 입력받은 데이터를 BufferedReader를 통해 Char로 변경하여 저장하고

BufferWriter를 통해 Char형태로 출력하는것이다




클래스를 import 하지 않아 빨간 줄이 뜨면 커서를 해당 라인에 두고 Ctrl+Shift+O를 누르면 된다. 이클립스가 자동으로 그 라인이 실행되기 위해 필요한 클래스를 import해준다.
