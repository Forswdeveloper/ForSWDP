네스티드 클래스와 람다의 소개.

네스티드 클래스 : 클래스 안에 정의된 클래스

class Outer{
  class Nested{...}
}

              Static 네스티드 클래스 ( static class StaticNestedClass{...} )
Nested클래스 -                                        멤버(이너)클래스 Member Inner Class
              Non-static 네스티드 클래스, 이너 클래스  로컬(이너)클래스 Local Inner Class
                                                     익명(이너)클래스 Anonymous Inner Class
1. Static 클래스
2. 멤버 클래스
2. 로컬 클래스
4. 익명 클래스

Static 네스티드 클래스.

class Outer{
  private static int num = 0;     // num과 Outer는 사실상 관계가 없다.
  // Outer로 묶여있는 이웃들이 아니면 접근을 허용하지 않겠다.
  static class Nested1{           // 마찬가지 자리를 빌린것 뿐.
    void add(int n) { num+=n;}
  }
  static class Nested2{           // 마찬가지 자리를 빌린것 뿐.
    int get() { return num; }
  }
}

Outer.Nested nst1 = new Outer.Nested();
nst1.add(5);
Outer.Nested2 nst2 = new Outer.Nested2();
System.out.println(nst2.get());

Static 네스티드 클래스는 static 선언이 갖는 특성이 반영된 클래스이다. 
따라서 자신을 감싸는 외부 클래스의 인스턴스와 상관없이 Static 네스티드 클래스의 인스턴스 생성이 가능하다.


이너클래스의 구분

1. 멤버 클래스
-> 인스턴스 변수, 인스턴스 메소드와 동일한 위치에 정의
2. 로컬 클래스
-> 중괄호 내에, 특히 메소드 내에 정의
3. 익명 클래스
-> 클래스인데 이름이 없는 클래스

class Outer{
  class MemberInner{...} 멤버 클래스
  // 
  void method(){
    class LocalInner {...} 로컬 클래스   보이는 범위를 좁힘.
  }
  
}


멤버 클래스
- 멤버 클래스의 인스턴스는 외부 클래스의 인스턴스에 종속적이다.
class Outer{
  private int num = 0;
  
  class Member{  // 인스턴스의 접근이 가능하다. 인스턴스 메소드가 인스턴스 변수에 접근 가능한것처럼.
                  // Outer없이는 아무것도 할 수가 없다.
    void add(int n) { num += n;}
    int get() {return num;}
  }
}
Outer o1 = new Outer();
Outer o2 = new Outer();

Outer.Member o1m1 = o1.new Member();  o1 인스턴스 기반으로 인스턴스 생성.
Outer.Member o1m2 = o1.new Member();

Outer.Member o2m1 = o2.new Member();  o2 인스턴스 기반으로 인스턴스 생성.
Outer.Member o2m2 = o2.new Member();

이너 인스턴스가 아우터 인스턴스 변수에 직접 접근이 가능하다.
o1m1.add(5);
System.out.println(o1m2.get());

o2m1.add(7);
System.out.println(o2m2.get());

아우터와 이너 클래스는 독립적으로 존재하지만 이너 클래스는 아우터에 직접적으로 접근이 가능하다.
반복자와 유사.

멤버 클래스를 언제 사용하는가.
▶ 멤버 클래스는 클래스의 정의를 감추어야 할 때 유용하게 사용이 된다.

interface Printable{
  void print();
}
class Papers{
  private String con;
  public Papers(String s) { cons = s;}
  
  public Printable getPrinter(){   //getPrinter() 메소드를 호출하면 인스턴스가 생성이되는데 이 인스턴스의 참조값을 넘겨준다.
                                   // 이것을 Printable형 참조변수로 받아라.
    return new Printer();
  }
  
  private class Printer implements Printable{  // 감추기 위해서 private 선언이 필수적 외부접근 허용 안함! Papers 클래스 안에 감춰진것.
    public void print(){
      System.out.println(con);
    }
  }
}

Papers p = new Papers(" 서류 내용 : 행복합니다. " );
Printable prn = p.getPrinter(); //prn이 return된 Printable형 인스턴스를 참조한다.
prn.print();
클래스 사용 입장에서 Printable() 인터페이스는 알지만 Printer 클래스는 모른다! 알 필요도 없다.

Printer라는 존재를 몰라도 된다. Papers에서 Printer를 감췄다. Printer라는 클래스가 바뀌어도 main에서 상관이 없다.


반복자가 멤버 클래스라는 사실!


public class ArrayList<E> implements List<E>{
  .....
  public Iterator<E> iterator(){
    return new Itr();    //멤버 클래스의 인스턴스 생성 및 반환.
  }
  prifvate class Itr implements Iterator<E>{   // 멤버 클래스의 정의.
        .....   반복자 클래스를 감 췃다 그 이름까지도.
  }
}
헷갈리면 반복자를 쓰는 방법에 대해 다시 공부하면 이해 가능.



로컬 클래스
- 로컬 클래스는 바로 위에서 소개한 멤버 클래스와 상당 부분 유사하다.
 지역 내에 정의된다는 점에서만 차이를 보임.
 
 안쪽에 있는 클래스는 제한적으로 사용해야 코드의 혼잡도를 높이지 않는다.
 
 어차피 getPrinter() 메소드 안에서만 Printer 클래스가 사용됨으로 굳이 밖에 놓을 필요가 없어서
 메소드 안으로 넣게되었다.

interface Printable{
  void print();
}
class Papers{
  private String con;
  public Papers(String s) { cons = s;}
  
  public Printable getPrinter(){   
    private class Printer implements Printable{  클래스의 이름이 인스턴스의 생성 목적으로만 존재한다. 이름이 굳이 필요할까?(익명클래스)
       public void print(){
         System.out.println(con);
       }
    }                                 멤버클래스의 특징도 그대로 다 가진다.
    return new Printer();             메소드안으로 더 깊이 감춘것이다.
  }
  
  
}

Papers p = new Papers(" 서류 내용 : 행복합니다. " );
Printable prn = p.getPrinter(); //prn이 return된 Printable형 인스턴스를 참조한다.
prn.print();


익명 클래스(Anonymous Class)


익명 클래스는 좀 더 줄여서 표현하기 위한 약속이다.
-> 인터페이스의 구현 결과 밖에 없는 간단한 클래스인 경우에 인터페이스의 이름을 근거로 인스턴스를 생성하도록 하자
return new Printer() -> return new Printable()
인터페이스가 클래스가 될 수 없는 이유는 메소드가 추상메소드로 이루어져있기 때문이다.
구현하지 않은 인터페이스는 의미가 없기에 구현 내용을 이어서 덧 붙여주게 되엇다.

public Printable getPrinter(){
  return new Printable(){ // 익명 클래스의 정의와 인스턴스 생성.
    public void print(){
      System.out.println(con);
    }
  };
}

단순화 시켜서 구현.


