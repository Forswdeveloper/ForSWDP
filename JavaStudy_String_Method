문자열을 연결시키는 법 concat

public class StringConcat {
	public static void main(String[] args) {
		String str1 = "Coffee";
		String str2 = "Bread";
		
		String str3 = str1.concat(str2);
		System.out.println(str3);
		
		String str4 = "Fresh".concat(str3);  // 큰 따음표로 문자열 표현은 String 인스턴스 생성으로 이어진다.
		System.out.println(str4);
	}
}
concat 메소드는 이어서 출력이 가능하다.

문자열 일부 추출하기 substring

public class SubString {
	public static void main(String[] args)
	{
		String st1 = "abcdefg";
		String st2 = st1.substring(2);
		
		System.out.println(st2);
		
		String st3 = st1.substring(2,4);
		System.out.println(st3);
	}
}
문자열의 내용 비교 comparing


public class CompString {
	public static void main(String[] args)
	{
		String str1 = "lexi";
		String str2 = "Lexi";
		
		int cmp;
		
		if(str1.equals(str2))
		{
			System.out.println("두 문자열은 같습니다.");
		}
		else
		{
			System.out.println("두 문자열은 다릅니다.");
		}
		
		cmp = str1.compareTo(str2);   // 호출된 인스턴스의 문자열이 전달된 문자열보다 앞서면 cmp는 0보다 작은값,뒤서면 0보다 큰 값
		
		if(cmp==0)
		{
			System.out.println("두 문자열은 일치합니다.");
		}
		else if(cmp<0)
		{
			System.out.println("사전의 앞에 위치하는 문자 : " + str1);
		}
		else if(cmp>0)
		{
			System.out.println("사전의 앞에 위치하는 문자 : " + str2);
		}
	}
}

기본 자료형의 값을 문자열로 바꾸기

double e = 2.718281;
String se = String.valueOf(e);

문자열을 대상으로 하는 +연산과 +=연산


StringBuilder 클래스
내부적으로 문자열을 저장하기 위한 메모리공간을 지닌다. String 클래스의 메모리 공간과는 달리 문자를 추가,삭제하는것이 가능하다.

append(int i) : 기본 자료형 데이터를 문자열 내용에 추가. // 다양한 인자 전달 가능.
delete(int start,int end) :  start에서부터 end 이전까지의 내용을 삭제
insert(int offset,String str) : 인덱스 offset의 위치에 str에 전달된 문자열 추가.
reverse() : 저장된 문자열의 내용을 뒤집는다.
substring(int start, int end) : 인덱스 start에서부터 end 이전까지의 내용만 담은 String 인스턴스 생성 및 반환.
toString() : 저장된 문자열의 내용을 담은 String 인스턴스 생성 및 반환.

StringBuilder stbuf = new StringBuilder("123");
stbuf.append(45678);
System.out.println(stbuf);
stbuf.delete(0, 2);
System.out.println(stbuf);
stbuf.replace(0, 3, "AB");//문자열 위치 0부터 3 이전까지 AB로 교체.
System.out.println(stbuf);
stbuf.reverse();
System.out.println(stbuf);
String sub = stbuf.substring(2,4);
System.out.println(sub);


StringBuilder 의 메모리공간 확보
ex) Stringbuilder stbuf = new StringBuilder(64);



