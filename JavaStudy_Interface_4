인터페이스 대상의 instanceof 연산.

interface Printable{
	void printLine(String str);
}
class SimplePrinter implements Printable{
	public void printLine(String str)
	{
		System.out.println(str);
	}
}
class MultiPrinter extends SimplePrinter{
	public void printLine(String str)
	{
		super.printLine("Start of Multi...");
		super.printLine(str);
		super.printLine("End of Multi");
		
	}
}
public class InstanceofInterface {
	public static void main(String[] args)
	{
		Printable prn1 = new SimplePrinter();   // 인터페이스 참조변수 선언
		Printable prn2 = new MultiPrinter();  // 인터페이스 참조변수 선언
		
		if(prn1 instanceof Printable)
		{
			prn1.printLine("This is a Simple Printer");
		}
		System.out.println();
		if(prn2 instanceof Printable)
		{
			prn2.printLine("This is a Multi Printer");
		}
	}
}

Maker Interface
인터페이스는 클래스에 특별한 표식을 다는 용도로 사용 된다. 이렇게 사용되는 인터페이스를 가리켜 마커 인터페이스라고 한다.
마커 인터페이스에는 아무런 메소드도 존재하지 않는 경우가 많다.

interface Upper {}
interface Lower {}

interface Printable{
	String getContents();
}
class Report implements Printable,Lower{
	String cons;
	
	Report(String cons)
	{
		this.cons = cons;
	}
	public String getContents()
	{
		return cons;
	}
	
}
class Printer{
	public void printContents(Printable doc)
	{
		if(doc instanceof Upper)
		{
			System.out.println((doc.getContents()).toUpperCase());   //toUpperCase() = 모든 문자열을 대문자로 바꾼다.
		}
		else if(doc instanceof Lower)
		{
			System.out.println((doc.getContents()).toLowerCase());    //toLowerCase() = 모든 문자열을 소문자로 바꾼다.
		}
		else
		{
			System.out.println(doc.getContents());
		}
	}
}

public class MarkerInterface {
	public static void main(String[] args)
	{
		Printer prn = new Printer();
		Report doc = new Report("Simple Funny News~");
		prn.printContents(doc);
	}

}

추상클래스 
하나 이상의 추상메소드를 갖는 클래스를 가리켜 추상클래스라고 한다.
ex)
public abstract class House{
  public void methodOne(){
    System.out.println("mehtod one");
  }
  @Override
  public abstract void methodTwo();  // 추상 메소드
}
추상메소드는 인터페이스와 유사하다.
추상클래스를 대상으로 인스턴스 생성 불가
다른 클래스에 의해 추상메소드가 구현 되어야 한다.
구현의 형태가 아닌 상속의 형태를 가진다.(extends 사용)


인터페이스 정리.


1. 인터페이스

1) 사용이유 : 자바에서는 클래스의 다중상속 허용x(상속받은 어떤 클래스와 다른 클래스가 공통점을 갖고있어도
그 공통점을 추출해서 슈퍼클래스를 만들수x, 왜냐하면 이미 다른 클래스와 상속관계를 맺고 있기 때문
=>클래스들의 공통점 추출해서 인터페이스로 만들기)

2)인터페이스는 기능만 표현 가능**공통데이터 표현x

3)선언: 클래스 시작 시 interface라는 키워드 명시

4)구현: 클래스와 인터페이스의 관계는 클래스 쪽에서 implements라는 자바 키워드와 인터페이스 이름을 쓰는 것으로 맺어짐

2. 인터페이스 선언 법

1)인터페이스 이름은 대문자로 시작하는 명사or형용사

   메소드 이름은 소문자로 시작하는 동사

2)인터페이스에 속하는 메소드 무조건 추상메소드로 선언

   (abstract 키워드 생략 가능, 왜냐하면 인터페이스의 메소드는 무조건 추상메소드->자바 컴파일러가 컴파일 할떄 자동추가)

3)인터페이스 구현 하는 클래스 선언시 : 클래스본체 바로 앞에 implements 명시

  인터페이스의 메소드 구현하는 메소드 앞 반드시 public 키워드 붙이기

  상속과 동시에 인터페이스 구현하는 클래스 선언시 : extends 먼저, implements 뒤에



*overriding 할 떄 *슈퍼클래스의 메소드 재정의/인터페이스의 메소드 재정의(구현)

 1)이름동일

 2) 파라미터 개수, 순서, 타입 동일

 3) 리턴타입동일

 4) throws 유무 동일

 5) public 키워드 붙이기


