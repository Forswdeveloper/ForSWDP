예외는 단순한 문법 오류가 아닌 실행 중간에 발생하는 정상적이지 않은 상황을 뜻한다.

자바는 예외 상황별로 그 상황을 알리기 위한 클래스를 정의하고 있다. 이런 클래스를 가리켜 예외클래스라고 한다.

ex)
  java.lang.ArithmeticException  수학 연산에서의 오류 상황을 의미하는 예외 클래스.
  java.util.InputMismatchException  클래스 Scanner를 통한 값의 입력에서의 오류 상황을 의미하는 예외 클래스.

자바에서 오류가 발생하면 예외클래스의 인스턴스를 생성하는데 이 인스턴스를 프로그래머가 처리하면 예외는 처리된 것으로 간주하여
프로그램을 종료하지 않는다.

예외 처리 방법.  try~catch방법
try{
  
  ...관찰 영역...
  
}
catch(Exception name){
  ...처리 영역...
}
이 둘은 항상 연결되어 있어야 한다.

try 영역에서 발생한 예외 상황을 catch 영역에서 처리한다.
catch는 메소드처럼 동작한다.

import java.util.Scanner;


public class ExceptionCase {
	public static void main(String[] args)
	{
		Scanner kb = new Scanner(System.in);
		
		try {
			System.out.println("a/b....a?  ");
			int n1 = kb.nextInt();
			System.out.println("a/b....b?  ");
			int n2 = kb.nextInt();
			System.out.printf("%d / %d = %d \n",n1,n2,n1/n2);
		}
		catch(ArithmeticException e)  //예외는 형이 같아야한다.
		{
			System.out.println(e.getMessage());   //예외의 원인을 담고있는 문자열을 반환하는 메소드.
		}
		
		System.out.println("Good Bye~~~!");
	}
}

try 로 감싸야 할 영역의 결정.

try{
  1.
  2. 예외 발생 지점
  3.
}
catch(Exception e){
}
4. 예외 처리 이후 발생지점

2에서 예외가 발생되면 2 이후의 전체 영역은 건너 뛰어 4의 위치에서 실행 이어나감.
예외 처리 이후의 실행 특성은 관련이 있는 작업들을 하나로 묶는데 도움이 된다.
하나의 작업을 묶는 용도, try는 예외가 발생할 수 있는 영역을 묶는 용도이다.



둘 이상의 예외 처리

아래와 같이 catch 구문 둘을 이어서 구성하면 된다. 
catch(ArithmeticException e)
{
	System.out.println(e.getMessage());
}
catch(InputMismatchException e) {
	System.out.println(e.getMessage());
}
하나의 catch 구문 안에서 둘 이상의 예외를 처리하는 것도 가능하다.
catch(ArithmeticException | InputMismatchException e)
{
	System.out.println(e.getMessage());
}




