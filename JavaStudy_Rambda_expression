람다 표현식.


람다와 함수형(기능적) 인터페이스.(기능이 하나인,추상메소드가 하나인 인터페이스)

- 구현해야 할 추상메소드가 하나인 인터페이스

인스턴스보다 기능 하나가 필요한 상황을 위한 람다   -> 기능 하나 ( 메소드 하나)
class SLenComp implements Comparator<String>{
  @Override
  public int compare(String s1, STring s2){
    return s1.length() - s2.length();
  }
}

List<String> list = new ArrayList<>();
list.add("Robot");
list.add("Toy");
list.add("Box");

Collections.sort(list, new SLenComp());   // Collections.sort는 정렬 대상 뿐만아니라 정렬의 기준을 가진 기능도 필요로한다.

for(String s : list)
  System.out.println();


매개변수가 있고 반환하지 않는 람다식

interface Printagel{
  void print(Strig s);   // 매개변수 하나, 반환형 void
}

Printable P;
p = (String s) -> {System.out.println(s);};  // 줄임 없는 표현.
p.print("Lambda exp one.");

p = (String s) -> System.out.println(s);  // 중괄호 생략.
p.print("Lambda exp two.");

p = (s) -> System.out.println(s); // 매개변수 형 생략
p.print("Lambda exp three.");

p = s -> System.out.println(s); // 매개변수 소괄호 생략.
p.print("Lambda exp four.");

메소드 몸체가 둘 이상의 문장으로 이뤄져 있거나,
매개변수의 수가 둘 이상인 경우에는 각각 중괄호와 소괄호의 생략이 불가능하다.


매개변수가 둘 인 람다식

interface Calculate(
  void cal(int a, int b); // 매개변수 둘 , 반환형 void
}
Calculate c;
c = (a,b) -> System.out.println(a+b);
c.cal(4,3);

c = (a,b) -> System.out.println(a-b);
c.cal(4,3);

c = (a,b) -> System.out.println(a*b);
c.cal(4,3);


매개변수가 있고 반환하는 람다식1

interface Calculate{
  int cal(int a, int b); // 값을 반환하는 추상 메소드
}

Calculate c;
c = (a,b) -> {return a+b;};  //return문의 중괄호는 생략 불가.
System.out.println(c.ca(4.3));   

c = (a,b) -> a+b;  //연산 결과가 남으면, 별도로 명시하지 않아도 반환 대상이 됨.
System.out.println(c.cal(4,3)); 

매개변수가 있고 반환하는 람다식2

interface HowLong{
  int len(String s);
}
HowLong h1 = s -> s.length();   -> 값이 남아서 return 생략 가능.
System.out.println(hl.len("I am so happy"));


매개변수가 없는 람다식

interface Generate{
  int rand();
}
Generator gen = () ->{     // 매개변수가 없을 경우 없다고 명시를 해주어야 한다.
  Random rand = new Random();
  return rand.nextInt(50);
 }


함수형 인터페이스와 어노테이션.

@FunctionalInterfae
-> 함수형 인터페이스의 조건을 갖추었는지에 대한 검사를 컴파일러에게 요청.

@FunctionalInterface        
interface Calculate{
  int cal(int a, int b)
}

@FunctionalInterface
interface Calculate{
  int cal(int a, int b);
  default int add(int a, int b) {return a+b;}
  static int sub(int a, int b) {return a-b;}
}
추상 메소드가 하나이니, 함수형 인터페이스 조건에 부합.



람다식과 제네릭

@FunctionalInterface
interface Calculate <T>{
  T cal(T a, T b);
}
Calculate<Integer> ci = (a,b) -> a+b;
System.out.println(ci.cal(4,3));

Calculate<Double> cd = (a,b) -> a+b;
System.out.println(cd.cal(4.32,3.45));




미리 정의되어 있는 함수형 인터페이스.

default boolean removeIf(Predicate<? super E> filter)  <- 람다 식을 전달해야함. 추상 메소드가 무엇인지만 알면 됌.
-> Collection<E> 인터페이스에 정의되어 있는 디폴트 메소드.

Predicate 인터페이스의 추상 메소드는 다음과 같이 정의해 두었다.            @FunctionalInterface
  boolean test(T t);                                                   public interface Predicate<T>{
                                                                            boolean test(T t): 
                                                                       }
미리 정의해 두었으므로 Predicate라는 이름만으로 통한다!



미리 정의해둔 대표 인터페이스

java.util.function 패키지로 묶여 있음.

Predicate<T>      boolean test(T t)
                    전달 인자를 근거로 참 또는 거짓을 반환
Supplier<T>       T get()
                    메소드 호출 시 무엇인가를 제공함 
Consumer<T>       void accept(T t)
                    무엇인자를 받아 들이기만 함 
Function<T,R>     R apply(T t)
                  입출력 출력이 있음(수학적으로는 함수)



Predicate<T>
boolean test(T t);

public static int sum<Predicate<Integer> p, List<Integer> list){
  int s = 0;
  for(int n : list){
    if(p.test(n))     // 전달해준 메소드에 따라서 참과 거짓을 판별
      s+=n;
  }]
  return s;
}
List<Integer> list = Arrays.asList(1,5,7,9,11,12);
int s;
s = sum(n-> n%2 == 0, list);       // list에서 값을 하나씩 꺼내서 문장으로 전달될때 문장이 실행된다.
System.out.println("짝수 합 : " + s);

s = sum(n-> n%2 != 0, list);
System.out.println("홀수 합 : " + s);


Predicate<T>를 구체화하고 다양화 한 인터페이스들.

IntPredicate       boolean test(int value)
LongPredicate      boolean test(long value)
DoublePredicate    boolean test(double value)
Bipredicate<T,U>   boolean test(T t, U u)  -> 2가지 정보를 가지고 참 거짓을 판별.


public static int sum(Predicate<Integer> p, List<Integer> list){...}
                            ↓
public static int sum(IntPredicate p, List<Integer> list){...}
    대체 가능! 그리고 박싱, 언박싱 과정이 필요 없어짐.





Supplier<T>
T get();

                                                이 메소드가 호출될 때마다 난수가 생성됨.
public static List<Integer> makeIntList(Supplier<Integer> s, int n){
  List<Integer> list = new ArrayList<>();
  for(int i = 0 ; i < n ; i++)
      list.add(s.get());    /// 난수를 생성해 담는다.
  return list;
}

Supplier<Integer> spr = () ->{
  Random rand = new Random();
  return rand.nextInt(50);
};
List<Integer> list = makeIntList(spr, 5);
System.out.println(list);

list = makeIntList(spr, 10);
System.out.println(list);


Supplier<T>를 구체화 한 인터페이스들

IntSupplier        int getAsInt()
LongSupplier       long getAsLong()
DoubleSupplier     double getAsDouble()
BooleanSupplier    boolean getAsBoolean()

public static List<Integer> makeIntList(Supplier<Integer> s, int n){......}
                            ↓
public static List<Integer> makeIntList(IntSupplier s, int n){......}
              대체 가능! 그리고 박싱, 언박싱 과정이 필요 없어짐.


Consumer<T>
void accept(T t);      반환 없고 전달 인자만.


Consumer<String> c = s -> System.out.println(s);
c.accept("Pineapple");      // 출력이라는 결과를 보임.
c.accept("Struawberry");


Consumer<T>를 구체화하고 다양화 한 인터페이스들

IntConsumer             void accept(int value)
ObjIntConsumer<T>       void accept(T t, int value)

LongConsumer            void accept(long value)
ObjLongConsumer<T>      void accept(T t, long value)

DoubleConsumer          void accept(double value)
ObjDoubleConsumer<T>    void accept(T t, double value)

BiConsumer<T,U>         void accept(T t, U u)   두개의 인스턴스를 소모하겠다.


Consumer<String> c = s -> System.out.println(s);
ObjIntConsumer<String> c = (s,i) -> System.out.println(i + "." + s);



Function<T,R>   <매개변수형, 반환형>    들어오고, 나가고
R apply(T t);

Function<String, Integer> f = s -> s.length();
System.out.println(f.apply("Robot"));
System.out.println(f.apply("System"));


Function<T,R>을 구체화하고 다양화 한 인터페이스들
전달 To 반환
전달To  전달인자만 결정.
To반환  반환 형만 결정.
bi가 오면 전달인자가 하나 늘었다는 것.
To가 기준으로  To 왼쪽에 전달 인자가 오고 오른쪽 인자형으로 반환된다.
IntToDoubleFunction           double applyAsDoule(int value)
DoubleToIntFunction           int applyAsInt(double value)

IntUnaryOperator              int applyAsInt(int operand)     // 둘다 Int로 받아서 Int로 반환
DoubleUnaryOperator           double applyAsDouble(double operand)  /// 둘다 Double로 받아서 Double로 반환.

BiFunction<T,U,R>             R apply(T t, U u) 전달 인자의 수가 2개로 늘었다.  R로 반환.

IntFunction<R>                R apply(int value) 전달 인자만 Int임을 이야기함.
DoubleFunction<R>             R apply(double value) 전달 인자만 Double임을 이야기함

ToIntFunction<T>              int applyAsInt(T value) 반환이 Int
ToDoubleFunction<T>           double applyAsDouble(T value) 반환이 Double
ToIntBiFunction<T,U>          int applyAsInt(T t, U u) 반환이 Int
ToDoubleBiFunction<T,U>       double applyAsDouble(T t, U u) 반환이 Double



추가로

Function<T,R>            R apply(T t)         꼭 T 와 R이 달라야 할 이유는 없다.
BiFunction<T,U,R>        R apply(T t, U u)
                                              앞서 소개한 인터페이스들.


UnaryOperator<T>         T apply(T t)         그래서 제공되었다.
BinaryOperator<T>        T apply(t t1, T t2)
                                              T와 R을 일치시킨 인터페이스들.




removeIf 메소드를 사용해 보자

Collection<E> 인터페잇의 디폴트 메소드
default boolean removeIf(Predicate<? super E> fileter)  
-> 컬렉션 인터페이스를 구현하는 인스턴스들을 대상으로 호출할 수 있다.
누구를 지울것인가에 대한 조건식인 람다식은 true / false를 반환하는 람다식이어야 되고
 인자(Collection 인스턴스에 저장되어있는 데이터)를 하나 받도록 해야 한다.
 
 
ArrayList<Integer> 인스턴스의 removeIf
public boolean removeIf(Predicate<? super Integer> filter)


removeIf 메소드의 기능
"Removes all of the elements of this collection that satisfy the given predicate"
"컬렉션 인스턴스를 대상으로 해서 removeIf 메소드를 호출하면 전달하는 조건에 부합하는 저장된 데이터(인스턴스)를 지운다."




removeIf 메소드를 사용해 보자2

List<Integer> ls1 = Arrays.asList(1,-2,3,-4,5);
ls1 = new ArrayList<>(ls1);

List<Double> ls2 = Arrays.asList(-1.1,2.2,3.3,-4.4,5.5);
ls2 = new ArraysList<>(ls2);

       Double이 아닌 Number인 이유
       1. 넣는것만 허용하겠다.
       2. ? super Double 이면 Integer용으로 Predicate를 하나 더 만들어야 함으로
          Integer, Double  둘다 상속하는 Number로 만들었다.
Predicate<Number> p = n -> n.doubleValue() < 0.0; // 삭제의 조건
ls1.removeIf(p);        // List<Integer> 인스턴스에 전달
ls2.removeIf(p);        // List<Double> 인스턴스에 전달

System.out.println(ls1);
System.out.println(ls2);









