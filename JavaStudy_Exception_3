프로그래머가 정의하는 예외.

class ReadAgeException extends Exception{
	public ReadAgeException()
	{
		super("유효하지 않은 나이가 입력되었습니다.")
	}
}
이 클래스의 핵심은 Exception 클래스를 상속하는데 있다.
상위 클래스의 생성자를 호출하면서 예외 상황에 대한 설명을 담은 문자열을 전달하는데
Throwable 클래스에 정의된 public String getMessage() 메소드 호출 시 반환이 된다.

import java.util.Scanner;

class ReadAgeException extends Exception
{
	public ReadAgeException(){
		super("유호하지 않은 나이가 입력되었습니다.");    //상위 클래스의 생성자를 호출하면서 예외 상황에 대한 설명을 담은 문자열을 전달
	}
}

public class MyExceptionClass {
	public static void main(String[] args)
	{
		System.out.println("나이 입력 : ");
		
		try {
			int age = readAge();
			System.out.printf("입력된 나이 : %d \n",age);
		}
		catch(ReadAgeException e){
			System.out.println(e.getMessage());  // 예외 상황 문자열
		}
	}
	public static int readAge() throws ReadAgeException{ 
		Scanner kb = new Scanner(System.in);
		int age = kb.nextInt();
		
		if(age<=0)
		{
			throw new ReadAgeException();   // 예외의 발생
      //주의 throws가 아닌 throw.
      // throw(new ReadAgeException());
		}
		
		return age;
	}
}

String 은 nextLine()

잘못된 catch 구문의 구성.
try {
	...
}
catch(FirstExcption e) {}
catch(SecondExcption e) {}
catch(ThirdExcption e) {}
두번째 세번째 catch 구문이 실행될 일이 절대 없다.

올바른 구문
try {
	...
}
catch(ThirdExcption e) {}
catch(SecondExcption e) {}
catch(FirstExcption e) {}


finally 구문.
try에 이어서 finally가 올 수 있다.
try {
}
finally {   // 코드의 실행이 try 안으로 진입하면, 무조건 실행된다.
}

또는

try {
}
catch(Exception e) {
}
finally {   // 코드의 실행이 try 안으로 진입하면, 무조건 실행된다.
}

finally 구문은 try에서 예외가 발생하건 안 하건, catch가 실행되건 안되면, 무조건 실행된다.
그럼으로 finally구문에는 반드시 실행되어야만 하는 코드가 들어가면 유용하게 사용할 수 있다.
public class IOExceptionCase {
	public static void main(String[] args)
	{
		Path file = Paths.get("C:\\JavaStudy\\Simple.txt");
		BufferedWriter writer = null;
		try {
			writer = Files.newBufferedWriter(file);
			writer.write('A');
			writer.write('Z');
			writer.write('C');
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		finally {
				try {
					if(writer != null)
						writer.close();
				}
				catch(IOException e){
					e.printStackTrace();
				}
			
		}
	}
}
이처럼 파일의 닫음이 반드시 필요함을 finally 구문에 넣음으로서 해결 할 수 있다. 
파일을 닫는 과정도 예외가 발생할 수 있으므로 예외를 해주는것이 필수적이다. 
위처럼 finally 구문 안에 try~catch 구문을 넣을 수 있다.

이를 한결 단순하게 하기 위해서 자바 7에서 try-with-resources문이 등장하였다.

try-with-resources

writer = Files.newBufferedWriter(file);
이 문장이 실행되면
writer.close();
이 문장이 반드시 실행되어야 하는데  finally로 이를 처리할 경우 코드가 복잡해진다.
try-with-resources의 기본 구성은 다음과 같다.
try(resources){
}
catch(Exception e){
}
catch 구문은 선택이다 필요 없으면 생략 가능하다.
resources에는 종료의 과정을 필요로 하는 리소스를 생성할 수 있다. 그러면 이 리소스는 try-with-resources 문을 빠져나오면서 자동 종료된다.
Path file = Paths.get("C:\\JavaStudy\\Simple.txt");
		
try(BufferedWriter writer = Files.newBufferedWriter(file);) {
			
	writer.write('나');
	writer.write('Z');
	writer.write('C');
}
catch(IOException e)
{
	e.printStackTrace();
}
이로써 인스턴스의 종료는 신경 쓰지 않아도 된다.

try-with-resources문에서 호출되는 메소드는 AutoCloseable 인터페이스의 close메소드이다.
따라서 close 이외의 메소드 호출을 기대하는 것은 곤란하다.

둘 이상의 try-with-resources문을 구성가능하다.
try(resources1 ; resources2){
}
catch(Exception e){
}

try문의 과도한 사용은 성능저하를 일으킬 수 있다.
